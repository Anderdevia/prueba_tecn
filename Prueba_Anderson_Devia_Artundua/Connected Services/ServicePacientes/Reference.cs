//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prueba_Anderson_Devia_Artundua.ServicePacientes {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicePacientes.IPacientesService")]
    public interface IPacientesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/AgregarPaciente", ReplyAction="http://tempuri.org/IPacientesService/AgregarPacienteResponse")]
        bool AgregarPaciente(WcfServPaci.PacientesContract pacientesContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/AgregarPaciente", ReplyAction="http://tempuri.org/IPacientesService/AgregarPacienteResponse")]
        System.Threading.Tasks.Task<bool> AgregarPacienteAsync(WcfServPaci.PacientesContract pacientesContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/Actualizar", ReplyAction="http://tempuri.org/IPacientesService/ActualizarResponse")]
        bool Actualizar(WcfServPaci.PacientesContract pacientesContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/Actualizar", ReplyAction="http://tempuri.org/IPacientesService/ActualizarResponse")]
        System.Threading.Tasks.Task<bool> ActualizarAsync(WcfServPaci.PacientesContract pacientesContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/Eliminar", ReplyAction="http://tempuri.org/IPacientesService/EliminarResponse")]
        bool Eliminar(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/Eliminar", ReplyAction="http://tempuri.org/IPacientesService/EliminarResponse")]
        System.Threading.Tasks.Task<bool> EliminarAsync(string numero);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/MostrarRegistro", ReplyAction="http://tempuri.org/IPacientesService/MostrarRegistroResponse")]
        WcfServPaci.PacientesContract[] MostrarRegistro();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPacientesService/MostrarRegistro", ReplyAction="http://tempuri.org/IPacientesService/MostrarRegistroResponse")]
        System.Threading.Tasks.Task<WcfServPaci.PacientesContract[]> MostrarRegistroAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPacientesServiceChannel : Prueba_Anderson_Devia_Artundua.ServicePacientes.IPacientesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PacientesServiceClient : System.ServiceModel.ClientBase<Prueba_Anderson_Devia_Artundua.ServicePacientes.IPacientesService>, Prueba_Anderson_Devia_Artundua.ServicePacientes.IPacientesService {
        
        public PacientesServiceClient() {
        }
        
        public PacientesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PacientesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PacientesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PacientesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AgregarPaciente(WcfServPaci.PacientesContract pacientesContract) {
            return base.Channel.AgregarPaciente(pacientesContract);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarPacienteAsync(WcfServPaci.PacientesContract pacientesContract) {
            return base.Channel.AgregarPacienteAsync(pacientesContract);
        }
        
        public bool Actualizar(WcfServPaci.PacientesContract pacientesContract) {
            return base.Channel.Actualizar(pacientesContract);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarAsync(WcfServPaci.PacientesContract pacientesContract) {
            return base.Channel.ActualizarAsync(pacientesContract);
        }
        
        public bool Eliminar(string numero) {
            return base.Channel.Eliminar(numero);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAsync(string numero) {
            return base.Channel.EliminarAsync(numero);
        }
        
        public WcfServPaci.PacientesContract[] MostrarRegistro() {
            return base.Channel.MostrarRegistro();
        }
        
        public System.Threading.Tasks.Task<WcfServPaci.PacientesContract[]> MostrarRegistroAsync() {
            return base.Channel.MostrarRegistroAsync();
        }
    }
}
